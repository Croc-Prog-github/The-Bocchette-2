{
  "version": 3,
  "sources": ["../src/WebSocketClient.ts"],
  "sourcesContent": ["import WebSocket from 'ws';\n\nimport { Protocol, Client, ClientState, ISendOptions, getMessageBytes, logger, debugMessage } from '@colyseus/core';\nimport { Schema } from '@colyseus/schema';\n\nconst SEND_OPTS = { binary: true };\n\nexport class WebSocketClient implements Client {\n  public sessionId: string;\n  public state: ClientState = ClientState.JOINING;\n  public _enqueuedMessages: any[] = [];\n  public _afterNextPatchQueue;\n  public _reconnectionToken: string;\n\n  constructor(\n    public id: string,\n    public ref: WebSocket,\n  ) {\n    this.sessionId = id;\n  }\n\n  public sendBytes(type: string | number, bytes: number[] | Uint8Array, options?: ISendOptions) {\n    debugMessage(\"send bytes(to %s): '%s' -> %j\", this.sessionId, type, bytes);\n\n    this.enqueueRaw(\n      getMessageBytes.raw(Protocol.ROOM_DATA_BYTES, type, undefined, bytes),\n      options,\n    );\n  }\n\n  public send(messageOrType: any, messageOrOptions?: any | ISendOptions, options?: ISendOptions) {\n    debugMessage(\"send(to %s): '%s' -> %j\", this.sessionId, messageOrType, messageOrOptions);\n\n    this.enqueueRaw(\n      (messageOrType instanceof Schema)\n        ? getMessageBytes[Protocol.ROOM_DATA_SCHEMA](messageOrType)\n        : getMessageBytes.raw(Protocol.ROOM_DATA, messageOrType, messageOrOptions),\n      options,\n    );\n  }\n\n  public enqueueRaw(data: ArrayLike<number>, options?: ISendOptions) {\n    // use room's afterNextPatch queue\n    if (options?.afterNextPatch) {\n      this._afterNextPatchQueue.push([this, arguments]);\n      return;\n    }\n\n    if (this.state === ClientState.JOINING) {\n      // sending messages during `onJoin`.\n      // - the client-side cannot register \"onMessage\" callbacks at this point.\n      // - enqueue the messages to be send after JOIN_ROOM message has been sent\n      this._enqueuedMessages.push(data);\n      return;\n    }\n\n    this.raw(data, options);\n  }\n\n  public raw(data: ArrayLike<number>, options?: ISendOptions, cb?: (err?: Error) => void) {\n    // skip if client not open\n    if (this.ref.readyState !== WebSocket.OPEN) {\n      return;\n    }\n\n    this.ref.send(data, SEND_OPTS, cb);\n  }\n\n  public error(code: number, message: string = '', cb?: (err?: Error) => void) {\n    this.raw(getMessageBytes[Protocol.ERROR](code, message), undefined, cb);\n  }\n\n  get readyState() {\n    return this.ref.readyState;\n  }\n\n  public leave(code?: number, data?: string) {\n    this.ref.close(code, data);\n  }\n\n  public close(code?: number, data?: string) {\n    logger.warn('DEPRECATION WARNING: use client.leave() instead of client.close()');\n    try {\n      throw new Error();\n    } catch (e) {\n      logger.info(e.stack);\n    }\n    this.leave(code, data);\n  }\n\n  public toJSON() {\n    return { sessionId: this.sessionId, readyState: this.readyState };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAsB;AAEtB,kBAAmG;AACnG,oBAAuB;AAEvB,MAAM,YAAY,EAAE,QAAQ,KAAK;AAE1B,MAAM,gBAAkC;AAAA,EAO7C,YACS,IACA,KACP;AAFO;AACA;AAEP,SAAK,YAAY;AAAA,EACnB;AAAA,EAXO;AAAA,EACA,QAAqB,wBAAY;AAAA,EACjC,oBAA2B,CAAC;AAAA,EAC5B;AAAA,EACA;AAAA,EASA,UAAU,MAAuB,OAA8B,SAAwB;AAC5F,kCAAa,iCAAiC,KAAK,WAAW,MAAM,KAAK;AAEzE,SAAK;AAAA,MACH,4BAAgB,IAAI,qBAAS,iBAAiB,MAAM,QAAW,KAAK;AAAA,MACpE;AAAA,IACF;AAAA,EACF;AAAA,EAEO,KAAK,eAAoB,kBAAuC,SAAwB;AAC7F,kCAAa,2BAA2B,KAAK,WAAW,eAAe,gBAAgB;AAEvF,SAAK;AAAA,MACF,yBAAyB,uBACtB,4BAAgB,qBAAS,kBAAkB,aAAa,IACxD,4BAAgB,IAAI,qBAAS,WAAW,eAAe,gBAAgB;AAAA,MAC3E;AAAA,IACF;AAAA,EACF;AAAA,EAEO,WAAW,MAAyB,SAAwB;AAEjE,QAAI,SAAS,gBAAgB;AAC3B,WAAK,qBAAqB,KAAK,CAAC,MAAM,SAAS,CAAC;AAChD;AAAA,IACF;AAEA,QAAI,KAAK,UAAU,wBAAY,SAAS;AAItC,WAAK,kBAAkB,KAAK,IAAI;AAChC;AAAA,IACF;AAEA,SAAK,IAAI,MAAM,OAAO;AAAA,EACxB;AAAA,EAEO,IAAI,MAAyB,SAAwB,IAA4B;AAEtF,QAAI,KAAK,IAAI,eAAe,UAAAA,QAAU,MAAM;AAC1C;AAAA,IACF;AAEA,SAAK,IAAI,KAAK,MAAM,WAAW,EAAE;AAAA,EACnC;AAAA,EAEO,MAAM,MAAc,UAAkB,IAAI,IAA4B;AAC3E,SAAK,IAAI,4BAAgB,qBAAS,OAAO,MAAM,OAAO,GAAG,QAAW,EAAE;AAAA,EACxE;AAAA,EAEA,IAAI,aAAa;AACf,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA,EAEO,MAAM,MAAe,MAAe;AACzC,SAAK,IAAI,MAAM,MAAM,IAAI;AAAA,EAC3B;AAAA,EAEO,MAAM,MAAe,MAAe;AACzC,uBAAO,KAAK,mEAAmE;AAC/E,QAAI;AACF,YAAM,IAAI,MAAM;AAAA,IAClB,SAAS,GAAP;AACA,yBAAO,KAAK,EAAE,KAAK;AAAA,IACrB;AACA,SAAK,MAAM,MAAM,IAAI;AAAA,EACvB;AAAA,EAEO,SAAS;AACd,WAAO,EAAE,WAAW,KAAK,WAAW,YAAY,KAAK,WAAW;AAAA,EAClE;AACF;",
  "names": ["WebSocket"]
}
