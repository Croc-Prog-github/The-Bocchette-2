{
  "version": 3,
  "sources": ["../../src/rooms/RelayRoom.ts"],
  "sourcesContent": ["import { Context, defineTypes, MapSchema, Schema } from '@colyseus/schema';\n\nimport { Room } from '../Room';\nimport { Client } from '../Transport';\n\n/**\n * Create another context to avoid these types from being in the user's global `Context`\n */\nconst context = new Context();\n\nclass Player extends Schema { // tslint:disable-line\n  public connected: boolean;\n  public name: boolean;\n  public sessionId: string;\n}\ndefineTypes(Player, {\n  connected: 'boolean',\n  name: 'string',\n  sessionId: 'string',\n}, { context });\n\nclass State extends Schema { // tslint:disable-line\n  public players = new MapSchema<Player>();\n}\ndefineTypes(State, {\n  players: { map: Player },\n}, { context });\n\n/**\n * client.joinOrCreate(\"relayroom\", {\n *   maxClients: 10,\n *   allowReconnectionTime: 20\n * });\n */\n\nexport class RelayRoom extends Room<State> { // tslint:disable-line\n  public allowReconnectionTime: number = 0;\n\n  public onCreate(options: Partial<{\n    maxClients: number,\n    allowReconnectionTime: number,\n    metadata: any,\n  }>) {\n    this.setState(new State());\n\n    if (options.maxClients) {\n      this.maxClients = options.maxClients;\n    }\n\n    if (options.allowReconnectionTime) {\n      this.allowReconnectionTime = Math.min(options.allowReconnectionTime, 40);\n    }\n\n    if (options.metadata) {\n      this.setMetadata(options.metadata);\n    }\n\n    this.onMessage('*', (client: Client, type: string, message: any) => {\n      this.broadcast(type, [client.sessionId, message], { except: client });\n    });\n  }\n\n  public onJoin(client: Client, options: any = {}) {\n    const player = new Player();\n\n    player.connected = true;\n    player.sessionId = client.sessionId;\n\n    if (options.name) {\n      player.name = options.name;\n    }\n\n    this.state.players.set(client.sessionId, player);\n  }\n\n  public async onLeave(client: Client, consented: boolean) {\n    if (this.allowReconnectionTime > 0) {\n      const player = this.state.players.get(client.sessionId);\n      player.connected = false;\n\n      try {\n        if (consented) {\n          throw new Error('consented leave');\n        }\n\n        await this.allowReconnection(client, this.allowReconnectionTime);\n        player.connected = true;\n\n      } catch (e) {\n        this.state.players.delete(client.sessionId);\n      }\n    }\n  }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwD;AAExD,kBAAqB;AAMrB,MAAM,UAAU,IAAI,sBAAQ;AAE5B,MAAM,eAAe,qBAAO;AAI5B;AAAA,IACA,2BAAY,QAAQ;AAAA,EAClB,WAAW;AAAA,EACX,MAAM;AAAA,EACN,WAAW;AACb,GAAG,EAAE,QAAQ,CAAC;AAEd,MAAM,cAAc,qBAAO;AAAA,EAA3B;AAAA;AACE,SAAO,UAAU,IAAI,wBAAkB;AAAA;AACzC;AAAA,IACA,2BAAY,OAAO;AAAA,EACjB,SAAS,EAAE,KAAK,OAAO;AACzB,GAAG,EAAE,QAAQ,CAAC;AASP,MAAM,kBAAkB,iBAAY;AAAA,EAApC;AAAA;AACL,SAAO,wBAAgC;AAAA;AAAA,EAEhC,SAAS,SAIZ;AACF,SAAK,SAAS,IAAI,MAAM,CAAC;AAEzB,QAAI,QAAQ,YAAY;AACtB,WAAK,aAAa,QAAQ;AAAA,IAC5B;AAEA,QAAI,QAAQ,uBAAuB;AACjC,WAAK,wBAAwB,KAAK,IAAI,QAAQ,uBAAuB,EAAE;AAAA,IACzE;AAEA,QAAI,QAAQ,UAAU;AACpB,WAAK,YAAY,QAAQ,QAAQ;AAAA,IACnC;AAEA,SAAK,UAAU,KAAK,CAAC,QAAgB,MAAc,YAAiB;AAClE,WAAK,UAAU,MAAM,CAAC,OAAO,WAAW,OAAO,GAAG,EAAE,QAAQ,OAAO,CAAC;AAAA,IACtE,CAAC;AAAA,EACH;AAAA,EAEO,OAAO,QAAgB,UAAe,CAAC,GAAG;AAC/C,UAAM,SAAS,IAAI,OAAO;AAE1B,WAAO,YAAY;AACnB,WAAO,YAAY,OAAO;AAE1B,QAAI,QAAQ,MAAM;AAChB,aAAO,OAAO,QAAQ;AAAA,IACxB;AAEA,SAAK,MAAM,QAAQ,IAAI,OAAO,WAAW,MAAM;AAAA,EACjD;AAAA,EAEA,MAAa,QAAQ,QAAgB,WAAoB;AACvD,QAAI,KAAK,wBAAwB,GAAG;AAClC,YAAM,SAAS,KAAK,MAAM,QAAQ,IAAI,OAAO,SAAS;AACtD,aAAO,YAAY;AAEnB,UAAI;AACF,YAAI,WAAW;AACb,gBAAM,IAAI,MAAM,iBAAiB;AAAA,QACnC;AAEA,cAAM,KAAK,kBAAkB,QAAQ,KAAK,qBAAqB;AAC/D,eAAO,YAAY;AAAA,MAErB,SAAS,GAAP;AACA,aAAK,MAAM,QAAQ,OAAO,OAAO,SAAS;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AAEF;",
  "names": []
}
