var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TestServer_exports = {};
__export(TestServer_exports, {
  ColyseusTestServer: () => ColyseusTestServer
});
module.exports = __toCommonJS(TestServer_exports);
var import_core = require("@colyseus/core");
var import_colyseus = require("colyseus.js");
var httpie = __toESM(require("httpie"));
class ColyseusTestServer {
  constructor(server) {
    this.server = server;
    const hostname = "127.0.0.1";
    const port = server["port"];
    const client = new import_colyseus.Client(`ws://${hostname}:${port}`);
    const httpEndpoint = `http://${hostname}:${port}`;
    this.http = {
      ["get"]: (segments, opts) => httpie.get(`${httpEndpoint}${segments}`, opts),
      ["post"]: (segments, opts) => httpie.post(`${httpEndpoint}${segments}`, opts),
      ["patch"]: (segments, opts) => httpie.patch(`${httpEndpoint}${segments}`, opts),
      ["delete"]: (segments, opts) => httpie.del(`${httpEndpoint}${segments}`, opts),
      ["put"]: (segments, opts) => httpie.put(`${httpEndpoint}${segments}`, opts)
    };
    this.sdk = {
      joinOrCreate: function() {
        return client.joinOrCreate.apply(client, arguments);
      },
      join: client.join.bind(client),
      create: client.create.bind(client),
      joinById: client.joinById.bind(client),
      reconnect: client.reconnect.bind(client)
    };
  }
  sdk;
  http;
  async createRoom(roomName, clientOptions = {}) {
    const room = await import_core.matchMaker.createRoom(roomName, clientOptions);
    return this.getRoomById(room.roomId);
  }
  connectTo(room, clientOptions = {}) {
    return this.sdk.joinById(room.roomId, clientOptions);
  }
  getRoomById(roomId) {
    return import_core.matchMaker.getRoomById(roomId);
  }
  async cleanup() {
    await import_core.matchMaker.disconnectAll();
    const driver = this.server["driver"];
    if (driver) {
      await driver.clear();
    }
  }
  async shutdown() {
    await this.server.gracefullyShutdown(false);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ColyseusTestServer
});
