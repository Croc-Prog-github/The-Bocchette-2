{"version":3,"file":"Serializer.js","sourceRoot":"","sources":["../../src/serializer/Serializer.ts"],"names":[],"mappings":";;AAgBA,gDAEC;AAED,sCAIC;AAVD,MAAM,WAAW,GAA0B,EAAE,CAAC;AAE9C,SAAgB,kBAAkB,CAAE,EAAU,EAAE,UAAe;IAC3D,WAAW,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC;AACjC,CAAC;AAED,SAAgB,aAAa,CAAE,EAAU;IACrC,MAAM,UAAU,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;IACnC,IAAI,CAAC,UAAU,EAAE,CAAC;QAAC,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,EAAE,CAAC,CAAC;IAAC,CAAC;IAClE,OAAO,UAAU,CAAC;AACtB,CAAC","sourcesContent":["import type { Iterator } from \"@colyseus/schema\";\n\nexport type BufferLike = number[] | Uint8Array | Buffer;\n\nexport interface Serializer<State> {\n    setState(data: BufferLike, it?: Iterator): void;\n    getState(): State;\n\n    patch(data: BufferLike, it?: Iterator): void;\n    teardown(): void;\n\n    handshake?(bytes: BufferLike, it?: any): void;\n}\n\nconst serializers: { [id: string]: any } = {};\n\nexport function registerSerializer (id: string, serializer: any) {\n    serializers[id] = serializer;\n}\n\nexport function getSerializer (id: string) {\n    const serializer = serializers[id];\n    if (!serializer) { throw new Error(\"missing serializer: \" + id); }\n    return serializer;\n}"]}