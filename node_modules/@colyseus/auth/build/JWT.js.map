{
  "version": 3,
  "sources": ["../src/JWT.ts"],
  "sourcesContent": ["import jsonwebtoken, { JwtPayload, Jwt, VerifyOptions } from 'jsonwebtoken';\nimport { expressjwt } from 'express-jwt';\n\nexport type { VerifyOptions, Jwt, JwtPayload };\n\nexport const JWT = {\n  settings: {\n    /**\n     * The secret used to sign and verify the JWTs.\n     */\n    secret: undefined as jsonwebtoken.Secret,\n\n    verify: {\n      /**\n       * The first algorithm in the list is used to sign new tokens.\n       */\n      algorithms: ['HS256'],\n    } as VerifyOptions,\n  },\n\n  sign: function (payload: any, options: jsonwebtoken.SignOptions = {}) {\n    return new Promise<string>((resolve, reject) => {\n      if (options.algorithm === undefined) {\n        options.algorithm = JWT.settings.verify.algorithms[0];\n      }\n\n      jsonwebtoken.sign(payload, getJWTSecret(), options, (err, token) => {\n        if (err) reject(err.message);\n        resolve(token);\n      });\n    });\n  },\n\n  verify: function<T = JwtPayload | Jwt | string> (token: string, options?: VerifyOptions) {\n    return new Promise<T>((resolve, reject) => {\n      jsonwebtoken.verify(token, getJWTSecret(), options || JWT.settings.verify, function (err, decoded) {\n        if (err) reject(err);\n        resolve(decoded as T);\n      });\n    });\n  },\n\n  /**\n   * Returns the decoded payload without verifying if the signature is valid\n   */\n  decode: jsonwebtoken.decode,\n\n  /**\n   * Get express middleware that verifies JsonWebTokens and sets `req.auth`.\n   */\n  middleware: function (params?: Partial<Parameters<typeof expressjwt>[0]>): (req: any, res: any, next: any) => void {\n    return expressjwt(Object.assign({\n      secret: getJWTSecret(),\n      // credentialsRequired: false,\n      algorithms: JWT.settings.verify.algorithms,\n      ...JWT.settings.verify,\n    }, params));\n  },\n};\n\nfunction getJWTSecret() {\n  JWT.settings.secret ||= process.env.JWT_SECRET;\n\n  if (!JWT.settings.secret) {\n    console.error(\"\u274C Please provide 'JWT_SECRET' environment variable, or set 'JWT.settings.secret'.\");\n  }\n\n  return JWT.settings.secret;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6D;AAC7D,yBAA2B;AAIpB,MAAM,MAAM;AAAA,EACjB,UAAU;AAAA,IAIR,QAAQ;AAAA,IAER,QAAQ;AAAA,MAIN,YAAY,CAAC,OAAO;AAAA,IACtB;AAAA,EACF;AAAA,EAEA,MAAM,SAAU,SAAc,UAAoC,CAAC,GAAG;AACpE,WAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC9C,UAAI,QAAQ,cAAc,QAAW;AACnC,gBAAQ,YAAY,IAAI,SAAS,OAAO,WAAW;AAAA,MACrD;AAEA,0BAAAA,QAAa,KAAK,SAAS,aAAa,GAAG,SAAS,CAAC,KAAK,UAAU;AAClE,YAAI;AAAK,iBAAO,IAAI,OAAO;AAC3B,gBAAQ,KAAK;AAAA,MACf,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,QAAQ,SAAyC,OAAe,SAAyB;AACvF,WAAO,IAAI,QAAW,CAAC,SAAS,WAAW;AACzC,0BAAAA,QAAa,OAAO,OAAO,aAAa,GAAG,WAAW,IAAI,SAAS,QAAQ,SAAU,KAAK,SAAS;AACjG,YAAI;AAAK,iBAAO,GAAG;AACnB,gBAAQ,OAAY;AAAA,MACtB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAKA,QAAQ,oBAAAA,QAAa;AAAA,EAKrB,YAAY,SAAU,QAA6F;AACjH,eAAO,+BAAW,OAAO,OAAO;AAAA,MAC9B,QAAQ,aAAa;AAAA,MAErB,YAAY,IAAI,SAAS,OAAO;AAAA,MAChC,GAAG,IAAI,SAAS;AAAA,IAClB,GAAG,MAAM,CAAC;AAAA,EACZ;AACF;AAEA,SAAS,eAAe;AACtB,MAAI,SAAS,WAAW,QAAQ,IAAI;AAEpC,MAAI,CAAC,IAAI,SAAS,QAAQ;AACxB,YAAQ,MAAM,wFAAmF;AAAA,EACnG;AAEA,SAAO,IAAI,SAAS;AACtB;",
  "names": ["jsonwebtoken"]
}
