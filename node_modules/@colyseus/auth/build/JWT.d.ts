import jsonwebtoken, { JwtPayload, Jwt, VerifyOptions } from 'jsonwebtoken';
import { expressjwt } from 'express-jwt';
export type { VerifyOptions, Jwt, JwtPayload };
export declare const JWT: {
    settings: {
        /**
         * The secret used to sign and verify the JWTs.
         */
        secret: jsonwebtoken.Secret;
        verify: jsonwebtoken.VerifyOptions;
    };
    sign: (payload: any, options?: jsonwebtoken.SignOptions) => Promise<string>;
    verify: <T = string | jsonwebtoken.JwtPayload | jsonwebtoken.Jwt>(token: string, options?: VerifyOptions) => Promise<T>;
    /**
     * Returns the decoded payload without verifying if the signature is valid
     */
    decode: typeof jsonwebtoken.decode;
    /**
     * Get express middleware that verifies JsonWebTokens and sets `req.auth`.
     */
    middleware: (params?: Partial<Parameters<typeof expressjwt>[0]>) => (req: any, res: any, next: any) => void;
};
