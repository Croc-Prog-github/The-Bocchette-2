var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var WebSocketTransport_exports = {};
__export(WebSocketTransport_exports, {
  WebSocketTransport: () => WebSocketTransport
});
module.exports = __toCommonJS(WebSocketTransport_exports);
var import_http = __toESM(require("http"));
var import_url = require("url");
var import_ws = __toESM(require("ws"));
var import_core = require("@colyseus/core");
var import_WebSocketClient = require("./WebSocketClient");
function noop() {
}
function heartbeat() {
  this.pingCount = 0;
}
class WebSocketTransport extends import_core.Transport {
  wss;
  pingInterval;
  pingIntervalMS;
  pingMaxRetries;
  constructor(options = {}) {
    super();
    if (options.perMessageDeflate === void 0) {
      options.perMessageDeflate = false;
    }
    this.pingIntervalMS = options.pingInterval !== void 0 ? options.pingInterval : 3e3;
    this.pingMaxRetries = options.pingMaxRetries !== void 0 ? options.pingMaxRetries : 2;
    if (!options.server && !options.noServer) {
      options.server = import_http.default.createServer();
    }
    this.wss = new import_ws.default.Server(options);
    this.wss.on("connection", this.onConnection);
    this.wss.on("error", (err) => (0, import_core.debugAndPrintError)(err));
    this.server = options.server;
    if (this.pingIntervalMS > 0 && this.pingMaxRetries > 0) {
      this.server.on("listening", () => this.autoTerminateUnresponsiveClients(this.pingIntervalMS, this.pingMaxRetries));
      this.server.on("close", () => clearInterval(this.pingInterval));
    }
  }
  listen(port, hostname, backlog, listeningListener) {
    this.server.listen(port, hostname, backlog, listeningListener);
    return this;
  }
  shutdown() {
    this.wss.close();
    this.server.close();
  }
  simulateLatency(milliseconds) {
    const previousSend = import_ws.default.prototype.send;
    import_ws.default.prototype.send = function(...args) {
      setTimeout(() => previousSend.apply(this, args), milliseconds);
    };
  }
  autoTerminateUnresponsiveClients(pingInterval, pingMaxRetries) {
    this.pingInterval = setInterval(() => {
      this.wss.clients.forEach((client) => {
        if (client.pingCount >= pingMaxRetries) {
          (0, import_core.debugConnection)(`terminating unresponsive client`);
          return client.terminate();
        }
        client.pingCount++;
        client.ping(noop);
      });
    }, pingInterval);
  }
  async onConnection(rawClient, req) {
    rawClient.on("error", (err) => (0, import_core.debugAndPrintError)(err.message + "\n" + err.stack));
    rawClient.on("pong", heartbeat);
    const upgradeReq = req || rawClient.upgradeReq;
    const parsedURL = new import_url.URL(`ws://server/${upgradeReq.url}`);
    const sessionId = parsedURL.searchParams.get("sessionId");
    const processAndRoomId = parsedURL.pathname.match(/\/[a-zA-Z0-9_\-]+\/([a-zA-Z0-9_\-]+)$/);
    const roomId = processAndRoomId && processAndRoomId[1];
    const room = import_core.matchMaker.getRoomById(roomId);
    rawClient.pingCount = 0;
    const client = new import_WebSocketClient.WebSocketClient(sessionId, rawClient);
    try {
      if (!room || !room.hasReservedSeat(sessionId, parsedURL.searchParams.get("reconnectionToken"))) {
        throw new Error("seat reservation expired.");
      }
      await room._onJoin(client, upgradeReq);
    } catch (e) {
      (0, import_core.debugAndPrintError)(e);
      client.error(e.code, e.message, () => rawClient.close(import_core.Protocol.WS_CLOSE_WITH_ERROR));
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WebSocketTransport
});
