{
  "version": 3,
  "sources": ["../src/WebSocketClient.ts"],
  "sourcesContent": ["import WebSocket from 'ws';\n\nimport { Protocol, Client, ClientPrivate, ClientState, ISendOptions, getMessageBytes, logger, debugMessage, } from '@colyseus/core';\n\nconst SEND_OPTS = { binary: true };\n\nexport class WebSocketClient implements Client, ClientPrivate {\n  public sessionId: string;\n  public state: ClientState = ClientState.JOINING;\n  public reconnectionToken: string;\n\n  public _enqueuedMessages: any[] = [];\n  public _afterNextPatchQueue;\n  public _reconnectionToken: string;\n  public _joinedAt;\n\n  constructor(\n    public id: string,\n    public ref: WebSocket,\n  ) {\n    this.sessionId = id;\n  }\n\n  public sendBytes(type: string | number, bytes: Buffer | Uint8Array, options?: ISendOptions) {\n    debugMessage(\"send bytes(to %s): '%s' -> %j\", this.sessionId, type, bytes);\n\n    this.enqueueRaw(\n      getMessageBytes.raw(Protocol.ROOM_DATA_BYTES, type, undefined, bytes),\n      options,\n    );\n  }\n\n  public send(messageOrType: any, messageOrOptions?: any | ISendOptions, options?: ISendOptions) {\n    debugMessage(\"send(to %s): '%s' -> %j\", this.sessionId, messageOrType, messageOrOptions);\n\n    this.enqueueRaw(\n      getMessageBytes.raw(Protocol.ROOM_DATA, messageOrType, messageOrOptions),\n      options,\n    );\n  }\n\n  public enqueueRaw(data: Uint8Array | Buffer, options?: ISendOptions) {\n    // use room's afterNextPatch queue\n    if (options?.afterNextPatch) {\n      this._afterNextPatchQueue.push([this, [Buffer.from(data)]]);\n      return;\n    }\n\n    if (this.state === ClientState.JOINING) {\n      // sending messages during `onJoin`.\n      // - the client-side cannot register \"onMessage\" callbacks at this point.\n      // - enqueue the messages to be send after JOIN_ROOM message has been sent\n      // - create a new buffer for enqueued messages, as the underlying buffer might be modified\n      this._enqueuedMessages.push(Buffer.from(data));\n      return;\n    }\n\n    this.raw(data, options);\n  }\n\n  public raw(data: Uint8Array | Buffer, options?: ISendOptions, cb?: (err?: Error) => void) {\n    // skip if client not open\n    if (this.ref.readyState !== WebSocket.OPEN) {\n      return;\n    }\n\n    this.ref.send(data, SEND_OPTS, cb);\n  }\n\n  public error(code: number, message: string = '', cb?: (err?: Error) => void) {\n    this.raw(getMessageBytes[Protocol.ERROR](code, message), undefined, cb);\n  }\n\n  get readyState() {\n    return this.ref.readyState;\n  }\n\n  public leave(code?: number, data?: string) {\n    this.ref.close(code, data);\n  }\n\n  public close(code?: number, data?: string) {\n    logger.warn('DEPRECATION WARNING: use client.leave() instead of client.close()');\n    try {\n      throw new Error();\n    } catch (e) {\n      logger.info(e.stack);\n    }\n    this.leave(code, data);\n  }\n\n  public toJSON() {\n    return { sessionId: this.sessionId, readyState: this.readyState };\n  }\n}\n"],
  "mappings": ";AAAA,OAAO,eAAe;AAEtB,SAAS,UAAiC,aAA2B,iBAAiB,QAAQ,oBAAqB;AAEnH,IAAM,YAAY,EAAE,QAAQ,KAAK;AAE1B,IAAM,kBAAN,MAAuD;AAAA,EAU5D,YACS,IACA,KACP;AAFO;AACA;AAVT,SAAO,QAAqB,YAAY;AAGxC,SAAO,oBAA2B,CAAC;AASjC,SAAK,YAAY;AAAA,EACnB;AAAA,EAEO,UAAU,MAAuB,OAA4B,SAAwB;AAC1F,iBAAa,iCAAiC,KAAK,WAAW,MAAM,KAAK;AAEzE,SAAK;AAAA,MACH,gBAAgB,IAAI,SAAS,iBAAiB,MAAM,QAAW,KAAK;AAAA,MACpE;AAAA,IACF;AAAA,EACF;AAAA,EAEO,KAAK,eAAoB,kBAAuC,SAAwB;AAC7F,iBAAa,2BAA2B,KAAK,WAAW,eAAe,gBAAgB;AAEvF,SAAK;AAAA,MACH,gBAAgB,IAAI,SAAS,WAAW,eAAe,gBAAgB;AAAA,MACvE;AAAA,IACF;AAAA,EACF;AAAA,EAEO,WAAW,MAA2B,SAAwB;AAEnE,QAAI,SAAS,gBAAgB;AAC3B,WAAK,qBAAqB,KAAK,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;AAC1D;AAAA,IACF;AAEA,QAAI,KAAK,UAAU,YAAY,SAAS;AAKtC,WAAK,kBAAkB,KAAK,OAAO,KAAK,IAAI,CAAC;AAC7C;AAAA,IACF;AAEA,SAAK,IAAI,MAAM,OAAO;AAAA,EACxB;AAAA,EAEO,IAAI,MAA2B,SAAwB,IAA4B;AAExF,QAAI,KAAK,IAAI,eAAe,UAAU,MAAM;AAC1C;AAAA,IACF;AAEA,SAAK,IAAI,KAAK,MAAM,WAAW,EAAE;AAAA,EACnC;AAAA,EAEO,MAAM,MAAc,UAAkB,IAAI,IAA4B;AAC3E,SAAK,IAAI,gBAAgB,SAAS,KAAK,EAAE,MAAM,OAAO,GAAG,QAAW,EAAE;AAAA,EACxE;AAAA,EAEA,IAAI,aAAa;AACf,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA,EAEO,MAAM,MAAe,MAAe;AACzC,SAAK,IAAI,MAAM,MAAM,IAAI;AAAA,EAC3B;AAAA,EAEO,MAAM,MAAe,MAAe;AACzC,WAAO,KAAK,mEAAmE;AAC/E,QAAI;AACF,YAAM,IAAI,MAAM;AAAA,IAClB,SAAS,GAAG;AACV,aAAO,KAAK,EAAE,KAAK;AAAA,IACrB;AACA,SAAK,MAAM,MAAM,IAAI;AAAA,EACvB;AAAA,EAEO,SAAS;AACd,WAAO,EAAE,WAAW,KAAK,WAAW,YAAY,KAAK,WAAW;AAAA,EAClE;AACF;",
  "names": []
}
