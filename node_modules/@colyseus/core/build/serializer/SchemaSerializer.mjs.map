{
  "version": 3,
  "sources": ["../../src/serializer/SchemaSerializer.ts"],
  "sourcesContent": ["/* tslint:disable:no-string-literal */\n\nimport { Client } from '..';\nimport { Serializer } from './Serializer';\n\nimport { dumpChanges, hasFilter, Reflection, Schema } from '@colyseus/schema';\nimport { debugPatch } from '../Debug';\nimport { Protocol } from '../Protocol';\nimport { ClientState } from '../Transport';\n\nexport class SchemaSerializer<T> implements Serializer<T> {\n  public id = 'schema';\n\n  private state: T & Schema;\n  private useFilters: boolean = false;\n\n  private handshakeCache: number[];\n\n  public reset(newState: T & Schema) {\n    this.state = newState;\n    this.useFilters = hasFilter(newState.constructor as typeof Schema);\n  }\n\n  public getFullState(client?: Client) {\n    const fullEncodedState = this.state.encodeAll(this.useFilters);\n\n    if (client && this.useFilters) {\n      return this.state.applyFilters(client, true);\n\n    } else {\n      return fullEncodedState;\n    }\n  }\n\n  public applyPatches(clients: Client[]) {\n    const hasChanges = this.state['$changes'].changes.size > 0;\n\n    if (hasChanges) {\n      let numClients = clients.length;\n\n      // dump changes for patch debugging\n      if (debugPatch.enabled) {\n        (debugPatch as any).dumpChanges = dumpChanges(this.state);\n      }\n\n      // get patch bytes\n      const patches = this.state.encode(false, [], this.useFilters);\n\n      if (!this.useFilters) {\n        // encode changes once, for all clients\n        patches.unshift(Protocol.ROOM_STATE_PATCH);\n\n        while (numClients--) {\n          const client = clients[numClients];\n\n          //\n          // FIXME: avoid this check.\n          //\n          if (client.state === ClientState.JOINED) {\n            client.raw(patches);\n          }\n        }\n\n      } else {\n\n        // encode state multiple times, for each client\n        while (numClients--) {\n          const client = clients[numClients];\n\n          //\n          // FIXME: avoid this check.\n          //\n          if (client.state === ClientState.JOINED) {\n            const filteredPatches = this.state.applyFilters(client);\n            client.raw([Protocol.ROOM_STATE_PATCH, ...filteredPatches]);\n          }\n        }\n\n        this.state.discardAllChanges();\n      }\n\n      // debug patches\n      if (debugPatch.enabled) {\n        debugPatch(\n          '%d bytes sent to %d clients, %j',\n          patches.length,\n          clients.length,\n          (debugPatch as any).dumpChanges,\n        );\n      }\n    }\n\n    return hasChanges;\n  }\n\n  public handshake() {\n    /**\n     * Cache handshake to avoid encoding it for each client joining\n     */\n    if (!this.handshakeCache) {\n      this.handshakeCache = (this.state && Reflection.encode(this.state));\n    }\n\n    return this.handshakeCache;\n  }\n\n}\n"],
  "mappings": "AAKA,SAAS,aAAa,WAAW,kBAA0B;AAC3D,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAErB,MAAM,iBAA6C;AAAA,EAAnD;AACL,SAAO,KAAK;AAGZ,SAAQ,aAAsB;AAAA;AAAA,EAIvB,MAAM,UAAsB;AACjC,SAAK,QAAQ;AACb,SAAK,aAAa,UAAU,SAAS,WAA4B;AAAA,EACnE;AAAA,EAEO,aAAa,QAAiB;AACnC,UAAM,mBAAmB,KAAK,MAAM,UAAU,KAAK,UAAU;AAE7D,QAAI,UAAU,KAAK,YAAY;AAC7B,aAAO,KAAK,MAAM,aAAa,QAAQ,IAAI;AAAA,IAE7C,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEO,aAAa,SAAmB;AACrC,UAAM,aAAa,KAAK,MAAM,YAAY,QAAQ,OAAO;AAEzD,QAAI,YAAY;AACd,UAAI,aAAa,QAAQ;AAGzB,UAAI,WAAW,SAAS;AACtB,QAAC,WAAmB,cAAc,YAAY,KAAK,KAAK;AAAA,MAC1D;AAGA,YAAM,UAAU,KAAK,MAAM,OAAO,OAAO,CAAC,GAAG,KAAK,UAAU;AAE5D,UAAI,CAAC,KAAK,YAAY;AAEpB,gBAAQ,QAAQ,SAAS,gBAAgB;AAEzC,eAAO,cAAc;AACnB,gBAAM,SAAS,QAAQ;AAKvB,cAAI,OAAO,UAAU,YAAY,QAAQ;AACvC,mBAAO,IAAI,OAAO;AAAA,UACpB;AAAA,QACF;AAAA,MAEF,OAAO;AAGL,eAAO,cAAc;AACnB,gBAAM,SAAS,QAAQ;AAKvB,cAAI,OAAO,UAAU,YAAY,QAAQ;AACvC,kBAAM,kBAAkB,KAAK,MAAM,aAAa,MAAM;AACtD,mBAAO,IAAI,CAAC,SAAS,kBAAkB,GAAG,eAAe,CAAC;AAAA,UAC5D;AAAA,QACF;AAEA,aAAK,MAAM,kBAAkB;AAAA,MAC/B;AAGA,UAAI,WAAW,SAAS;AACtB;AAAA,UACE;AAAA,UACA,QAAQ;AAAA,UACR,QAAQ;AAAA,UACP,WAAmB;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEO,YAAY;AAIjB,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK,iBAAkB,KAAK,SAAS,WAAW,OAAO,KAAK,KAAK;AAAA,IACnE;AAEA,WAAO,KAAK;AAAA,EACd;AAEF;",
  "names": []
}
