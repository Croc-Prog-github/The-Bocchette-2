{
  "version": 3,
  "sources": ["../src/Protocol.ts"],
  "sourcesContent": ["import { pack, Packr } from '@colyseus/msgpackr';\nimport { encode, Iterator } from '@colyseus/schema';\n\n// Colyseus protocol codes range between 0~100\nexport enum Protocol {\n  // Room-related (10~19)\n  JOIN_ROOM = 10,\n  ERROR = 11,\n  LEAVE_ROOM = 12,\n  ROOM_DATA = 13,\n  ROOM_STATE = 14,\n  ROOM_STATE_PATCH = 15,\n  // ROOM_DATA_SCHEMA = 16, // DEPRECATED: used to send schema instances via room.send()\n  ROOM_DATA_BYTES = 17,\n\n  // WebSocket close codes (https://github.com/Luka967/websocket-close-codes)\n  WS_CLOSE_NORMAL = 1000,\n  WS_CLOSE_GOING_AWAY = 1001,\n\n  // WebSocket error codes\n  WS_CLOSE_CONSENTED = 4000,\n  WS_CLOSE_WITH_ERROR = 4002,\n  WS_CLOSE_DEVMODE_RESTART = 4010,\n\n  WS_SERVER_DISCONNECT = 4201,\n  WS_TOO_MANY_CLIENTS = 4202,\n}\n\nexport enum ErrorCode {\n  // MatchMaking Error Codes\n  MATCHMAKE_NO_HANDLER = 4210,\n  MATCHMAKE_INVALID_CRITERIA = 4211,\n  MATCHMAKE_INVALID_ROOM_ID = 4212,\n  MATCHMAKE_UNHANDLED = 4213, // generic exception during onCreate/onJoin\n  MATCHMAKE_EXPIRED = 4214, // generic exception during onCreate/onJoin\n\n  AUTH_FAILED = 4215,\n  APPLICATION_ERROR = 4216,\n\n  INVALID_PAYLOAD = 4217,\n}\n\n// Inter-process communication protocol\nexport enum IpcProtocol {\n  SUCCESS = 0,\n  ERROR = 1,\n  TIMEOUT = 2,\n}\n\n\nconst packr = new Packr();\n\n// msgpackr workaround: initialize buffer\npackr.encode(undefined);\n\nexport const getMessageBytes = {\n  [Protocol.JOIN_ROOM]: (reconnectionToken: string, serializerId: string, handshake?: Buffer) => {\n    const it: Iterator = { offset: 1 };\n    packr.buffer[0] = Protocol.JOIN_ROOM;\n\n    packr.buffer[it.offset++] = Buffer.byteLength(reconnectionToken, \"utf8\");\n    encode.utf8Write(packr.buffer, reconnectionToken, it);\n\n    packr.buffer[it.offset++] = Buffer.byteLength(serializerId, \"utf8\");\n    encode.utf8Write(packr.buffer, serializerId, it);\n\n    let handshakeLength = handshake?.byteLength || 0;\n\n    // check if buffer needs to be resized\n    if (handshakeLength > packr.buffer.byteLength - it.offset) {\n      packr.useBuffer(Buffer.alloc(it.offset + handshakeLength, packr.buffer));\n    }\n\n    if (handshakeLength > 0) {\n      handshake.copy(packr.buffer, it.offset, 0, handshakeLength);\n    }\n\n    return packr.buffer.subarray(0, it.offset + handshakeLength);\n  },\n\n  [Protocol.ERROR]: (code: number, message: string = '') => {\n    const it: Iterator = { offset: 1 };\n    packr.buffer[0] = Protocol.ERROR;\n\n    encode.number(packr.buffer, code, it);\n    encode.string(packr.buffer, message, it);\n\n    return packr.buffer.subarray(0, it.offset);\n  },\n\n  [Protocol.ROOM_STATE]: (bytes: number[]) => {\n    return [Protocol.ROOM_STATE, ...bytes];\n  },\n\n  raw: (code: Protocol, type: string | number, message?: any, rawMessage?: Uint8Array | Buffer) => {\n    const it: Iterator = { offset: 1 };\n    packr.buffer[0] = code;\n\n    if (typeof (type) === 'string') {\n      encode.string(packr.buffer, type as string, it);\n\n    } else {\n      encode.number(packr.buffer, type, it);\n    }\n\n    if (message !== undefined) {\n      // force to encode from offset\n      packr.position = 0;\n\n      //\n      // TODO: remove this after issue is fixed https://github.com/kriszyp/msgpackr/issues/139\n      //\n      // - This check is only required when running integration tests.\n      //   (colyseus.js' usage of msgpackr/buffer is conflicting)\n      //\n      if (process.env.NODE_ENV !== \"production\") {\n        packr.useBuffer(packr.buffer);\n      }\n\n      // pack message into the same packr.buffer\n      const endOfBufferOffset = packr.pack(message, 2048 + it.offset).byteLength;\n                                                 // 2048 = RESERVE_START_SPACE\n      return packr.buffer.subarray(0, endOfBufferOffset);\n\n    } else if (rawMessage !== undefined) {\n\n      // check if buffer needs to be resized\n      // TODO: can we avoid this?\n      if (rawMessage.length + it.offset > packr.buffer.byteLength) {\n        packr.useBuffer(Buffer.alloc(it.offset + rawMessage.length, packr.buffer));\n      }\n\n      // copy raw message into packr.buffer\n      packr.buffer.set(rawMessage, it.offset);\n\n      return packr.buffer.subarray(0, it.offset + rawMessage.byteLength);\n\n    } else {\n      return packr.buffer.subarray(0, it.offset);\n    }\n  },\n\n};\n\n"],
  "mappings": "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",
  "names": ["Protocol", "ErrorCode", "IpcProtocol"]
}
