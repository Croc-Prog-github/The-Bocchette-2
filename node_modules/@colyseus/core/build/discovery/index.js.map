{
  "version": 3,
  "sources": ["../../src/discovery/index.ts"],
  "sourcesContent": ["import { Presence } from '../presence/Presence';\n\nconst NODES_SET = 'colyseus:nodes';\nconst DISCOVERY_CHANNEL = 'colyseus:nodes:discovery';\n\nexport interface Node {\n  port: number;\n  processId: string;\n}\n\nexport async function getHostname() {\n  return process.env.SELF_HOSTNAME;\n}\n\nasync function getNodeAddress(node: Node) {\n  const host = await getHostname();\n  const port = process.env.SELF_PORT ?? node.port;\n  return (port)\n    ? `${node.processId}/${host}:${port}`\n    : `${node.processId}/${host}`;\n}\n\nexport async function registerNode(presence: Presence, node: Node) {\n  const nodeAddress = await getNodeAddress(node);\n  await presence.sadd(NODES_SET, nodeAddress);\n  await presence.publish(DISCOVERY_CHANNEL, `add,${nodeAddress}`);\n}\n\nexport async function unregisterNode(presence: Presence, node: Node) {\n  const nodeAddress = await getNodeAddress(node);\n  await presence.srem(NODES_SET, nodeAddress);\n  await presence.publish(DISCOVERY_CHANNEL, `remove,${nodeAddress}`);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,YAAY;AAClB,MAAM,oBAAoB;AAO1B,eAAsB,cAAc;AAClC,SAAO,QAAQ,IAAI;AACrB;AAEA,eAAe,eAAe,MAAY;AACxC,QAAM,OAAO,MAAM,YAAY;AAC/B,QAAM,OAAO,QAAQ,IAAI,aAAa,KAAK;AAC3C,SAAQ,OACJ,GAAG,KAAK,aAAa,QAAQ,SAC7B,GAAG,KAAK,aAAa;AAC3B;AAEA,eAAsB,aAAa,UAAoB,MAAY;AACjE,QAAM,cAAc,MAAM,eAAe,IAAI;AAC7C,QAAM,SAAS,KAAK,WAAW,WAAW;AAC1C,QAAM,SAAS,QAAQ,mBAAmB,OAAO,aAAa;AAChE;AAEA,eAAsB,eAAe,UAAoB,MAAY;AACnE,QAAM,cAAc,MAAM,eAAe,IAAI;AAC7C,QAAM,SAAS,KAAK,WAAW,WAAW;AAC1C,QAAM,SAAS,QAAQ,mBAAmB,UAAU,aAAa;AACnE;",
  "names": []
}
