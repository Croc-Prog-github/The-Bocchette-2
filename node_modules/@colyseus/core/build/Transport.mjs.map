{
  "version": 3,
  "sources": ["../src/Transport.ts"],
  "sourcesContent": ["import * as http from 'http';\nimport * as https from 'https';\nimport * as net from 'net';\n\nimport { Schema } from '@colyseus/schema';\nimport { EventEmitter } from 'events';\nimport { DummyServer, spliceOne } from './utils/Utils';\n\nexport abstract class Transport {\n    public server?: net.Server | http.Server | https.Server | DummyServer;\n\n    public abstract listen(port?: number, hostname?: string, backlog?: number, listeningListener?: Function): this;\n    public abstract shutdown(): void;\n\n    public abstract simulateLatency(milliseconds: number): void;\n}\n\nexport interface ISendOptions {\n  afterNextPatch?: boolean;\n}\n\nexport enum ClientState { JOINING, JOINED, RECONNECTED, LEAVING }\n\n/**\n * The client instance from the server-side is responsible for the transport layer between the server and the client.\n * It should not be confused with the Client from the client-side SDK, as they have completely different purposes!\n * You operate on client instances from `this.clients`, `Room#onJoin()`, `Room#onLeave()` and `Room#onMessage()`.\n *\n * - This is the raw WebSocket connection coming from the `ws` package. There are more methods available which aren't\n *  encouraged to use along with Colyseus.\n */\nexport interface Client<UserData=any, AuthData=any> {\n  readyState: number;\n\n  id: string;\n  /**\n   * Unique id per session.\n   */\n  sessionId: string; // TODO: remove sessionId on version 1.0.0\n  state: ClientState;\n\n  ref: EventEmitter;\n\n  upgradeReq?: http.IncomingMessage; // cross-compatibility for ws (v3.x+) and uws\n\n  /**\n   * User-defined data can be attached to the Client instance through this variable.\n   * - Can be used to store custom data about the client's connection. userData is not synchronized with the client,\n   * and should be used only to keep player-specific with its connection.\n   */\n  userData?: UserData;\n\n  /**\n   * auth data provided by your `onAuth`\n   */\n  auth?: AuthData;\n  pingCount?: number; // ping / pong\n\n  _reconnectionToken: string;\n  _enqueuedMessages?: any[];\n  _afterNextPatchQueue: Array<[string | Client, IArguments]>;\n\n  raw(data: ArrayLike<number>, options?: ISendOptions, cb?: (err?: Error) => void): void;\n  enqueueRaw(data: ArrayLike<number>, options?: ISendOptions): void;\n\n  /**\n   * Send a type of message to the client. Messages are encoded with MsgPack and can hold any\n   * JSON-serializable data structure.\n   *\n   * @param type String or Number identifier the client SDK will use to receive this message\n   * @param message Message payload. (automatically encoded with msgpack.)\n   * @param options\n   */\n  send(type: string | number, message?: any, options?: ISendOptions): void;\n  send(message: Schema, options?: ISendOptions): void;\n\n  /**\n   * Send raw bytes to this specific client.\n   *\n   * @param type String or Number identifier the client SDK will use to receive this message\n   * @param bytes Raw byte array payload\n   * @param options\n   */\n  sendBytes(type: string | number, bytes: number[] | Uint8Array, options?: ISendOptions): void;\n\n  /**\n   * Disconnect this client from the room.\n   *\n   * @param code Custom close code. Default value is 1000.\n   * @param data\n   * @see {@link https://docs.colyseus.io/colyseus/server/room/#leavecode-number}\n   */\n  leave(code?: number, data?: string): void;\n\n  /**\n   * @deprecated Use .leave() instead.\n   */\n  close(code?: number, data?: string): void;\n\n  /**\n   * Triggers `onError` with specified code to the client-side.\n   *\n   * @param code\n   * @param message\n   */\n  error(code: number, message?: string): void;\n}\n\nexport class ClientArray<UserData = any, AuthData = any> extends Array<Client<UserData, AuthData>> {\n  public getById(sessionId: string): Client<UserData, AuthData> | undefined {\n    return this.find((client) => client.sessionId === sessionId);\n  }\n\n  public delete(client: Client<UserData, AuthData>): boolean {\n    return spliceOne(this, this.indexOf(client));\n  }\n}"],
  "mappings": "AAMA,SAAsB,iBAAiB;AAEhC,MAAe,UAAU;AAOhC;AAMO,IAAK,cAAL,kBAAKA,iBAAL;AAAmB,EAAAA,0BAAA;AAAS,EAAAA,0BAAA;AAAQ,EAAAA,0BAAA;AAAa,EAAAA,0BAAA;AAA5C,SAAAA;AAAA,GAAA;AAuFL,MAAM,oBAAoD,MAAkC;AAAA,EAC1F,QAAQ,WAA2D;AACxE,WAAO,KAAK,KAAK,CAAC,WAAW,OAAO,cAAc,SAAS;AAAA,EAC7D;AAAA,EAEO,OAAO,QAA6C;AACzD,WAAO,UAAU,MAAM,KAAK,QAAQ,MAAM,CAAC;AAAA,EAC7C;AACF;",
  "names": ["ClientState"]
}
