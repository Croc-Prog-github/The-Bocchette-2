{
  "version": 3,
  "sources": ["../../src/matchmaker/controller.ts"],
  "sourcesContent": ["/**\n * Matchmaking controller\n * (for interoperability between different http frameworks, e.g. express, uWebSockets.js, etc)\n */\n\nimport { IncomingMessage } from 'http';\nimport { ErrorCode } from '../Protocol.js';\nimport { ServerError } from '../errors/ServerError.js';\nimport * as matchMaker from '../MatchMaker.js';\nimport type { AuthContext } from '../Transport.js';\n\nexport default {\n  DEFAULT_CORS_HEADERS: {\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n    'Access-Control-Allow-Methods': 'OPTIONS, POST, GET',\n    'Access-Control-Allow-Credentials': 'true',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Max-Age': '2592000',\n    // ...\n  },\n\n  exposedMethods: ['joinOrCreate', 'create', 'join', 'joinById', 'reconnect'],\n  allowedRoomNameChars: /([a-zA-Z_\\-0-9]+)/gi,\n  matchmakeRoute: 'matchmake',\n\n  /**\n   * You can manually change the default corsHeaders by overwriting the `getCorsHeaders()` method:\n   *    ```\n   *    import { matchMaker } from \"@colyseus/core\";\n   *    matchMaker.controller.getCorsHeaders = function(req) {\n   *      if (req.headers.referer !== \"xxx\") {\n   *      }\n   *\n   *      return {\n   *        'Access-Control-Allow-Origin': 'safedomain.com',\n   *      }\n   *    }\n   *    ```\n   */\n  getCorsHeaders(req: IncomingMessage): { [header: string]: string } {\n    const origin = (req.headers && req.headers['origin']) || (req as any).getHeader && (req as any).getHeader('origin');\n    return {\n      ['Access-Control-Allow-Origin']: origin || \"*\",\n    };\n  },\n\n  async invokeMethod(\n    method: string,\n    roomName: string,\n    clientOptions: matchMaker.ClientOptions = {},\n    authOptions?: AuthContext,\n  ) {\n    if (this.exposedMethods.indexOf(method) === -1) {\n      throw new ServerError(ErrorCode.MATCHMAKE_NO_HANDLER, `invalid method \"${method}\"`);\n    }\n\n    try {\n      return await matchMaker[method](roomName, clientOptions, authOptions);\n\n    } catch (e) {\n      throw new ServerError(e.code || ErrorCode.MATCHMAKE_UNHANDLED, e.message);\n    }\n  }\n\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAA0B;AAC1B,yBAA4B;AAC5B,iBAA4B;AAG5B,IAAO,qBAAQ;AAAA,EACb,sBAAsB;AAAA,IACpB,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,oCAAoC;AAAA,IACpC,+BAA+B;AAAA,IAC/B,0BAA0B;AAAA;AAAA,EAE5B;AAAA,EAEA,gBAAgB,CAAC,gBAAgB,UAAU,QAAQ,YAAY,WAAW;AAAA,EAC1E,sBAAsB;AAAA,EACtB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBhB,eAAe,KAAoD;AACjE,UAAM,SAAU,IAAI,WAAW,IAAI,QAAQ,QAAQ,KAAO,IAAY,aAAc,IAAY,UAAU,QAAQ;AAClH,WAAO;AAAA,MACL,CAAC,6BAA6B,GAAG,UAAU;AAAA,IAC7C;AAAA,EACF;AAAA,EAEA,MAAM,aACJ,QACA,UACA,gBAA0C,CAAC,GAC3C,aACA;AACA,QAAI,KAAK,eAAe,QAAQ,MAAM,MAAM,IAAI;AAC9C,YAAM,IAAI,+BAAY,0BAAU,sBAAsB,mBAAmB,MAAM,GAAG;AAAA,IACpF;AAEA,QAAI;AACF,aAAO,MAAM,WAAW,MAAM,EAAE,UAAU,eAAe,WAAW;AAAA,IAEtE,SAAS,GAAG;AACV,YAAM,IAAI,+BAAY,EAAE,QAAQ,0BAAU,qBAAqB,EAAE,OAAO;AAAA,IAC1E;AAAA,EACF;AAEF;",
  "names": []
}
