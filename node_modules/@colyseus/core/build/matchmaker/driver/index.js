var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var driver_exports = {};
__export(driver_exports, {
  LocalDriver: () => LocalDriver
});
module.exports = __toCommonJS(driver_exports);
var import_Query = require("./Query");
var import_RoomData = require("./RoomData");
class LocalDriver {
  constructor() {
    this.rooms = [];
  }
  createInstance(initialValues = {}) {
    return new import_RoomData.RoomCache(initialValues, this.rooms);
  }
  has(roomId) {
    return this.rooms.some((room) => room.roomId === roomId);
  }
  find(conditions) {
    return this.rooms.filter((room) => {
      for (const field in conditions) {
        if (conditions.hasOwnProperty(field) && room[field] !== conditions[field]) {
          return false;
        }
      }
      return true;
    });
  }
  findOne(conditions) {
    return new import_Query.Query(this.rooms, conditions);
  }
  clear() {
    this.rooms = [];
  }
  shutdown() {
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LocalDriver
});
