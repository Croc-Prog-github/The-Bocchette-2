{
  "version": 3,
  "sources": ["../../../src/matchmaker/driver/index.ts"],
  "sourcesContent": ["import { IRoomListingData, SortOptions, RoomListingData, QueryHelpers, MatchMakerDriver } from \"./interfaces\";\n\n// re-export\nexport type { IRoomListingData, SortOptions, RoomListingData, QueryHelpers, MatchMakerDriver };\n\nimport { Query } from './Query';\nimport { RoomCache } from './RoomData';\n\nexport class LocalDriver implements MatchMakerDriver {\n  public rooms: RoomCache[] = [];\n\n  public createInstance(initialValues: any = {}) {\n    return new RoomCache(initialValues, this.rooms);\n  }\n\n  public has(roomId: string) {\n    return this.rooms.some((room) => room.roomId === roomId);\n  }\n\n  public find(conditions: Partial<IRoomListingData>) {\n    return this.rooms.filter(((room) => {\n      for (const field in conditions) {\n        if (\n          conditions.hasOwnProperty(field) &&\n          room[field] !== conditions[field]\n        ) {\n          return false;\n        }\n      }\n      return true;\n    }));\n  }\n\n  public findOne(conditions: Partial<IRoomListingData>) {\n    return new Query<RoomListingData>(this.rooms, conditions) as any as QueryHelpers<RoomListingData>;\n  }\n\n  public clear() {\n    this.rooms = [];\n  }\n\n  public shutdown() {\n  }\n}\n"],
  "mappings": "AAKA,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAEnB,MAAM,YAAwC;AAAA,EAA9C;AACL,SAAO,QAAqB,CAAC;AAAA;AAAA,EAEtB,eAAe,gBAAqB,CAAC,GAAG;AAC7C,WAAO,IAAI,UAAU,eAAe,KAAK,KAAK;AAAA,EAChD;AAAA,EAEO,IAAI,QAAgB;AACzB,WAAO,KAAK,MAAM,KAAK,CAAC,SAAS,KAAK,WAAW,MAAM;AAAA,EACzD;AAAA,EAEO,KAAK,YAAuC;AACjD,WAAO,KAAK,MAAM,OAAQ,CAAC,SAAS;AAClC,iBAAW,SAAS,YAAY;AAC9B,YACE,WAAW,eAAe,KAAK,KAC/B,KAAK,WAAW,WAAW,QAC3B;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAE;AAAA,EACJ;AAAA,EAEO,QAAQ,YAAuC;AACpD,WAAO,IAAI,MAAuB,KAAK,OAAO,UAAU;AAAA,EAC1D;AAAA,EAEO,QAAQ;AACb,SAAK,QAAQ,CAAC;AAAA,EAChB;AAAA,EAEO,WAAW;AAAA,EAClB;AACF;",
  "names": []
}
