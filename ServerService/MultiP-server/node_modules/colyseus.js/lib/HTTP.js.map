{"version":3,"file":"HTTP.js","sourceRoot":"","sources":["../src/HTTP.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,sDAAmD;AACnD,+CAAiC;AAEjC,MAAa,IAAI;IAGb,YAAsB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEjC,GAAG,CAAU,IAAY,EAAE,UAAmC,EAAE;QACnE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAEM,IAAI,CAAU,IAAY,EAAE,UAAmC,EAAE;QACpE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAEM,GAAG,CAAU,IAAY,EAAE,UAAmC,EAAE;QACnE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAEM,GAAG,CAAU,IAAY,EAAE,UAAmC,EAAE;QACnE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IAES,OAAO,CAAC,MAAsC,EAAE,IAAY,EAAE,UAAmC,EAAE;QACzG,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAM,EAAE,EAAE;;YACnG,MAAM,IAAI,yBAAW,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,EAAE,CAAA,MAAA,CAAC,CAAC,IAAI,0CAAE,KAAK,KAAI,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,OAAO,IAAI,SAAS,CAAC,CAAC;QAC1G,CAAC,CAAC,CAAC;IACP,CAAC;IAES,UAAU,CAAC,OAAgC;QACjD,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBAClB,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;aACxB;YAED,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAAC,SAAS,EAAE,CAAC;YAC9D,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC;SAClC;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ;AAvCD,oBAuCC","sourcesContent":["import { Client } from \"./Client\";\nimport { ServerError } from \"./errors/ServerError\";\nimport * as httpie from \"httpie\";\n\nexport class HTTP {\n    public authToken: string;\n\n    constructor(protected client: Client) {}\n\n    public get<T = any>(path: string, options: Partial<httpie.Options> = {}): Promise<httpie.Response<T>> {\n        return this.request(\"get\", path, options);\n    }\n\n    public post<T = any>(path: string, options: Partial<httpie.Options> = {}): Promise<httpie.Response<T>> {\n        return this.request(\"post\", path, options);\n    }\n\n    public del<T = any>(path: string, options: Partial<httpie.Options> = {}): Promise<httpie.Response<T>> {\n        return this.request(\"del\", path, options);\n    }\n\n    public put<T = any>(path: string, options: Partial<httpie.Options> = {}): Promise<httpie.Response<T>> {\n        return this.request(\"put\", path, options);\n    }\n\n    protected request(method: \"get\" | \"post\" | \"put\" | \"del\", path: string, options: Partial<httpie.Options> = {}): Promise<httpie.Response> {\n        return httpie[method](this.client['getHttpEndpoint'](path), this.getOptions(options)).catch((e: any) => {\n            throw new ServerError(e.statusCode || -1, e.data?.error || e.statusMessage || e.message || \"offline\");\n        });\n    }\n\n    protected getOptions(options: Partial<httpie.Options>) {\n        if (this.authToken) {\n            if (!options.headers) {\n                options.headers = {};\n            }\n\n            options.headers['Authorization'] = `Bearer ${this.authToken}`;\n            options.withCredentials = true;\n        }\n\n        return options;\n    }\n}\n"]}