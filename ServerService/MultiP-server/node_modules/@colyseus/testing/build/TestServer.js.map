{
  "version": 3,
  "sources": ["../src/TestServer.ts"],
  "sourcesContent": ["import { Server, Room, matchMaker } from \"@colyseus/core\";\nimport { Client } from \"colyseus.js\";\nimport * as httpie from \"httpie\";\n\nexport class ColyseusTestServer {\n  // matchmaking methods\n  public sdk: {\n    joinOrCreate: Client['joinOrCreate'],\n    join: Client['join'],\n    create: Client['create'],\n    joinById: Client['joinById'],\n    reconnect: Client['reconnect'],\n  };\n\n  public http: {\n    get: typeof httpie.get,\n    post: typeof httpie.post,\n    patch: typeof httpie.patch,\n    delete: typeof httpie.del,\n    put: typeof httpie.put,\n  };\n\n  constructor(public server: Server) {\n    const hostname = \"127.0.0.1\";\n    const port = server['port'];\n    const client = new Client(`ws://${hostname}:${port}`);\n\n    const httpEndpoint = `http://${hostname}:${port}`;\n    this.http = {\n      ['get']: (segments, opts) => httpie.get(`${httpEndpoint}${segments}`, opts),\n      ['post']: (segments, opts) => httpie.post(`${httpEndpoint}${segments}`, opts),\n      ['patch']: (segments, opts) => httpie.patch(`${httpEndpoint}${segments}`, opts),\n      ['delete']: (segments, opts) => httpie.del(`${httpEndpoint}${segments}`, opts),\n      ['put']: (segments, opts) => httpie.put(`${httpEndpoint}${segments}`, opts),\n    };\n\n    this.sdk = {\n      joinOrCreate: function() {\n        return client.joinOrCreate.apply(client, arguments);\n      },\n      join: client.join.bind(client),\n      create: client.create.bind(client),\n      joinById: client.joinById.bind(client),\n      reconnect: client.reconnect.bind(client),\n    };\n  }\n\n  async createRoom<State extends object = any, Metadata = any>(roomName: string, clientOptions: any = {}) {\n    const room = await matchMaker.createRoom(roomName, clientOptions);\n    return this.getRoomById<State, Metadata>(room.roomId);\n  }\n\n  connectTo<T extends object=any>(room: Room<T>, clientOptions: any = {}) {\n    return this.sdk.joinById<T>(room.roomId, clientOptions);\n  }\n\n  getRoomById<State extends object= any, Metadata = any>(roomId: string) {\n    return matchMaker.getRoomById(roomId) as Room<State, Metadata>;\n  }\n\n  async cleanup() {\n    // ensure no rooms are still alive\n    await matchMaker.disconnectAll();\n\n    const driver = this.server['driver'];\n    if (driver) { await driver.clear(); }\n  }\n\n  async shutdown() {\n    await this.server.gracefullyShutdown(false);\n  }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAyC;AACzC,sBAAuB;AACvB,aAAwB;AAEjB,MAAM,mBAAmB;AAAA,EAkB9B,YAAmB,QAAgB;AAAhB;AACjB,UAAM,WAAW;AACjB,UAAM,OAAO,OAAO;AACpB,UAAM,SAAS,IAAI,uBAAO,QAAQ,YAAY,MAAM;AAEpD,UAAM,eAAe,UAAU,YAAY;AAC3C,SAAK,OAAO;AAAA,MACV,CAAC,QAAQ,CAAC,UAAU,SAAS,OAAO,IAAI,GAAG,eAAe,YAAY,IAAI;AAAA,MAC1E,CAAC,SAAS,CAAC,UAAU,SAAS,OAAO,KAAK,GAAG,eAAe,YAAY,IAAI;AAAA,MAC5E,CAAC,UAAU,CAAC,UAAU,SAAS,OAAO,MAAM,GAAG,eAAe,YAAY,IAAI;AAAA,MAC9E,CAAC,WAAW,CAAC,UAAU,SAAS,OAAO,IAAI,GAAG,eAAe,YAAY,IAAI;AAAA,MAC7E,CAAC,QAAQ,CAAC,UAAU,SAAS,OAAO,IAAI,GAAG,eAAe,YAAY,IAAI;AAAA,IAC5E;AAEA,SAAK,MAAM;AAAA,MACT,cAAc,WAAW;AACvB,eAAO,OAAO,aAAa,MAAM,QAAQ,SAAS;AAAA,MACpD;AAAA,MACA,MAAM,OAAO,KAAK,KAAK,MAAM;AAAA,MAC7B,QAAQ,OAAO,OAAO,KAAK,MAAM;AAAA,MACjC,UAAU,OAAO,SAAS,KAAK,MAAM;AAAA,MACrC,WAAW,OAAO,UAAU,KAAK,MAAM;AAAA,IACzC;AAAA,EACF;AAAA,EAvCO;AAAA,EAQA;AAAA,EAiCP,MAAM,WAAuD,UAAkB,gBAAqB,CAAC,GAAG;AACtG,UAAM,OAAO,MAAM,uBAAW,WAAW,UAAU,aAAa;AAChE,WAAO,KAAK,YAA6B,KAAK,MAAM;AAAA,EACtD;AAAA,EAEA,UAAgC,MAAe,gBAAqB,CAAC,GAAG;AACtE,WAAO,KAAK,IAAI,SAAY,KAAK,QAAQ,aAAa;AAAA,EACxD;AAAA,EAEA,YAAuD,QAAgB;AACrE,WAAO,uBAAW,YAAY,MAAM;AAAA,EACtC;AAAA,EAEA,MAAM,UAAU;AAEd,UAAM,uBAAW,cAAc;AAE/B,UAAM,SAAS,KAAK,OAAO;AAC3B,QAAI,QAAQ;AAAE,YAAM,OAAO,MAAM;AAAA,IAAG;AAAA,EACtC;AAAA,EAEA,MAAM,WAAW;AACf,UAAM,KAAK,OAAO,mBAAmB,KAAK;AAAA,EAC5C;AAEF;",
  "names": []
}
