var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  RedisDriver: () => RedisDriver
});
module.exports = __toCommonJS(src_exports);
var import_ioredis = __toESM(require("ioredis"));
var import_Query = require("./Query");
var import_RoomData = require("./RoomData");
class RedisDriver {
  _client;
  constructor(options, clusterOptions) {
    this._client = Array.isArray(options) ? new import_ioredis.Cluster(options, clusterOptions) : new import_ioredis.default(options);
  }
  createInstance(initialValues = {}) {
    return new import_RoomData.RoomData(initialValues, this._client);
  }
  async has(roomId) {
    return await this._client.hexists("roomcaches", roomId) === 1;
  }
  async find(conditions) {
    const rooms = await this.getRooms();
    return rooms.filter((room) => {
      if (!room.roomId) {
        return false;
      }
      for (const field in conditions) {
        if (conditions.hasOwnProperty(field) && room[field] !== conditions[field]) {
          return false;
        }
      }
      return true;
    });
  }
  findOne(conditions) {
    if (typeof conditions.roomId !== "undefined") {
      return new Promise((resolve, reject) => {
        this._client.hget("roomcaches", conditions.roomId).then((roomcache) => {
          if (roomcache) {
            resolve(new import_RoomData.RoomData(JSON.parse(roomcache), this._client));
          } else {
            resolve(void 0);
          }
        }).catch(reject);
      });
    } else {
      return new import_Query.Query(this.getRooms(), conditions);
    }
  }
  async getRooms() {
    return Object.entries(await this._client.hgetall("roomcaches") ?? []).map(
      ([, roomcache]) => new import_RoomData.RoomData(JSON.parse(roomcache), this._client)
    );
  }
  async shutdown() {
    await this._client.quit();
  }
  clear() {
    this._client.del("roomcaches");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RedisDriver
});
