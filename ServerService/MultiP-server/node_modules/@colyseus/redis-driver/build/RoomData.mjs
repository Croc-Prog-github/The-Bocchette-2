import { logger } from "@colyseus/core";
class RoomData {
  clients = 0;
  locked = false;
  private = false;
  maxClients = Infinity;
  metadata;
  name;
  publicAddress;
  processId;
  roomId;
  createdAt;
  unlisted = false;
  #client;
  #removed = false;
  constructor(initialValues, client) {
    this.#client = client;
    this.createdAt = initialValues && initialValues.createdAt ? new Date(initialValues.createdAt) : new Date();
    for (const field in initialValues) {
      if (initialValues.hasOwnProperty(field)) {
        this[field] = initialValues[field];
      }
    }
  }
  toJSON() {
    return {
      clients: this.clients,
      createdAt: this.createdAt,
      maxClients: this.maxClients,
      metadata: this.metadata,
      name: this.name,
      publicAddress: this.publicAddress,
      processId: this.processId,
      roomId: this.roomId
    };
  }
  async save() {
    if (this.#removed) {
      return;
    }
    if (this.roomId) {
      const toJSON = this.toJSON;
      this.toJSON = void 0;
      const roomcache = JSON.stringify(this);
      this.toJSON = toJSON;
      await this.hset("roomcaches", this.roomId, roomcache);
    } else {
      logger.warn("RedisDriver: can't .save() without a `roomId`");
    }
  }
  updateOne(operations) {
    if (operations.$set) {
      for (const field in operations.$set) {
        if (operations.$set.hasOwnProperty(field)) {
          this[field] = operations.$set[field];
        }
      }
    }
    if (operations.$inc) {
      for (const field in operations.$inc) {
        if (operations.$inc.hasOwnProperty(field)) {
          this[field] += operations.$inc[field];
        }
      }
    }
    return this.save();
  }
  remove() {
    if (this.roomId) {
      this.#removed = true;
      return this.hdel("roomcaches", this.roomId);
    }
  }
  async hset(key, field, value) {
    return await this.#client.hset(key, field, value);
  }
  async hdel(key, field) {
    return await this.#client.hdel(key, field);
  }
}
export {
  RoomData
};
