{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import Redis, { Cluster, ClusterNode, ClusterOptions, RedisOptions } from 'ioredis';\n\nimport {\n  IRoomListingData,\n  MatchMakerDriver,\n  QueryHelpers,\n  RoomListingData,\n} from '@colyseus/core';\n\nimport { Query } from './Query';\nimport { RoomData } from './RoomData';\n\nexport class RedisDriver implements MatchMakerDriver {\n  private readonly _client: Redis | Cluster;\n\n  constructor(options?: number | string | RedisOptions | ClusterNode[], clusterOptions?: ClusterOptions) {\n    this._client = (Array.isArray(options))\n      ? new Cluster(options, clusterOptions)\n      : new Redis(options as RedisOptions);\n  }\n\n  public createInstance(initialValues: Partial<IRoomListingData> = {}) {\n    return new RoomData(initialValues, this._client);\n  }\n\n  public async has(roomId: string) {\n    return await this._client.hexists('roomcaches', roomId) === 1;\n  }\n\n  public async find(conditions: Partial<IRoomListingData>) {\n    const rooms = await this.getRooms();\n    return rooms.filter((room) => {\n      if (!room.roomId) {\n        return false;\n      }\n\n      for (const field in conditions) {\n        if (\n          conditions.hasOwnProperty(field) &&\n          room[field] !== conditions[field]\n        ) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n\n  public findOne(conditions: Partial<IRoomListingData>): QueryHelpers<RoomListingData> {\n    if (typeof conditions.roomId !== 'undefined') {\n      // get room by roomId\n\n      //\n      // TODO: refactor driver APIs.\n      // the API here is legacy from MongooseDriver which made sense on versions <= 0.14.0\n      //\n\n      // @ts-ignore\n      return new Promise<RoomListingData>((resolve, reject) => {\n        this._client.hget('roomcaches', conditions.roomId).then((roomcache) => {\n          if (roomcache) {\n            resolve(new RoomData(JSON.parse(roomcache), this._client));\n          } else {\n            resolve(undefined);\n          }\n        }).catch(reject);\n      });\n\n    } else {\n      // filter list by other conditions\n      return (new Query<RoomListingData>(this.getRooms(conditions['name']), conditions) as any) as QueryHelpers<RoomListingData>;\n    }\n  }\n\n  // gets recent room caches w/o making multiple simultaneous reads to REDIS\n  private _concurrentRoomCacheRequest?: Promise<Record<string, string>>;\n  private _roomCacheRequestByName: {[roomName: string]: Promise<RoomData[]>} = {};\n  private getRooms(roomName?: string) {\n    // if there's a shared request, return it\n    if (this._roomCacheRequestByName[roomName] !== undefined) {\n      return this._roomCacheRequestByName[roomName];\n    }\n\n    const roomCacheRequest = this._concurrentRoomCacheRequest || this._client.hgetall('roomcaches');\n    this._concurrentRoomCacheRequest = roomCacheRequest;\n\n    this._roomCacheRequestByName[roomName] = roomCacheRequest.then((result) => {\n      // clear shared promises so we can read it again\n      this._concurrentRoomCacheRequest = undefined;\n      delete this._roomCacheRequestByName[roomName];\n\n      let roomcaches = Object.entries(result ?? []);\n\n      //\n      // micro optimization:\n      // filter rooms by name before parsing JSON\n      //\n      if (roomName !== undefined) {\n        const roomNameField = `\"name\":\"${roomName}\"`;\n        roomcaches = roomcaches.filter(([, roomcache]) => roomcache.includes(roomNameField));\n      }\n\n      return roomcaches.map(\n        ([, roomcache]) => new RoomData(JSON.parse(roomcache), this._client)\n      );\n    });\n\n    return this._roomCacheRequestByName[roomName];\n  }\n\n  public async shutdown() {\n    await this._client.quit();\n  }\n\n  //\n  // only relevant for the test-suite.\n  // not used during runtime.\n  //\n  public clear() {\n    this._client.del('roomcaches');\n  }\n\n}\n"],
  "mappings": "AAAA,OAAO,SAAS,eAA0D;AAS1E,SAAS,aAAa;AACtB,SAAS,gBAAgB;AAElB,MAAM,YAAwC;AAAA,EAGnD,YAAY,SAA0D,gBAAiC;AA6DvG,SAAQ,0BAAqE,CAAC;AA5D5E,SAAK,UAAW,MAAM,QAAQ,OAAO,IACjC,IAAI,QAAQ,SAAS,cAAc,IACnC,IAAI,MAAM,OAAuB;AAAA,EACvC;AAAA,EAEO,eAAe,gBAA2C,CAAC,GAAG;AACnE,WAAO,IAAI,SAAS,eAAe,KAAK,OAAO;AAAA,EACjD;AAAA,EAEA,MAAa,IAAI,QAAgB;AAC/B,WAAO,MAAM,KAAK,QAAQ,QAAQ,cAAc,MAAM,MAAM;AAAA,EAC9D;AAAA,EAEA,MAAa,KAAK,YAAuC;AACvD,UAAM,QAAQ,MAAM,KAAK,SAAS;AAClC,WAAO,MAAM,OAAO,CAAC,SAAS;AAC5B,UAAI,CAAC,KAAK,QAAQ;AAChB,eAAO;AAAA,MACT;AAEA,iBAAW,SAAS,YAAY;AAC9B,YACE,WAAW,eAAe,KAAK,KAC/B,KAAK,WAAW,WAAW,QAC3B;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EAEO,QAAQ,YAAsE;AACnF,QAAI,OAAO,WAAW,WAAW,aAAa;AAS5C,aAAO,IAAI,QAAyB,CAAC,SAAS,WAAW;AACvD,aAAK,QAAQ,KAAK,cAAc,WAAW,MAAM,EAAE,KAAK,CAAC,cAAc;AACrE,cAAI,WAAW;AACb,oBAAQ,IAAI,SAAS,KAAK,MAAM,SAAS,GAAG,KAAK,OAAO,CAAC;AAAA,UAC3D,OAAO;AACL,oBAAQ,MAAS;AAAA,UACnB;AAAA,QACF,CAAC,EAAE,MAAM,MAAM;AAAA,MACjB,CAAC;AAAA,IAEH,OAAO;AAEL,aAAQ,IAAI,MAAuB,KAAK,SAAS,WAAW,OAAO,GAAG,UAAU;AAAA,IAClF;AAAA,EACF;AAAA,EAKQ,SAAS,UAAmB;AAElC,QAAI,KAAK,wBAAwB,cAAc,QAAW;AACxD,aAAO,KAAK,wBAAwB;AAAA,IACtC;AAEA,UAAM,mBAAmB,KAAK,+BAA+B,KAAK,QAAQ,QAAQ,YAAY;AAC9F,SAAK,8BAA8B;AAEnC,SAAK,wBAAwB,YAAY,iBAAiB,KAAK,CAAC,WAAW;AAEzE,WAAK,8BAA8B;AACnC,aAAO,KAAK,wBAAwB;AAEpC,UAAI,aAAa,OAAO,QAAQ,UAAU,CAAC,CAAC;AAM5C,UAAI,aAAa,QAAW;AAC1B,cAAM,gBAAgB,WAAW;AACjC,qBAAa,WAAW,OAAO,CAAC,CAAC,EAAE,SAAS,MAAM,UAAU,SAAS,aAAa,CAAC;AAAA,MACrF;AAEA,aAAO,WAAW;AAAA,QAChB,CAAC,CAAC,EAAE,SAAS,MAAM,IAAI,SAAS,KAAK,MAAM,SAAS,GAAG,KAAK,OAAO;AAAA,MACrE;AAAA,IACF,CAAC;AAED,WAAO,KAAK,wBAAwB;AAAA,EACtC;AAAA,EAEA,MAAa,WAAW;AACtB,UAAM,KAAK,QAAQ,KAAK;AAAA,EAC1B;AAAA,EAMO,QAAQ;AACb,SAAK,QAAQ,IAAI,YAAY;AAAA,EAC/B;AAEF;",
  "names": []
}
