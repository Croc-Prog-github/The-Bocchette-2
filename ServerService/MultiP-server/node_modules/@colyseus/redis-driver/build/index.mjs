import Redis, { Cluster } from "ioredis";
import { Query } from "./Query";
import { RoomData } from "./RoomData";
class RedisDriver {
  constructor(options, clusterOptions) {
    this._roomCacheRequestByName = {};
    this._client = Array.isArray(options) ? new Cluster(options, clusterOptions) : new Redis(options);
  }
  createInstance(initialValues = {}) {
    return new RoomData(initialValues, this._client);
  }
  async has(roomId) {
    return await this._client.hexists("roomcaches", roomId) === 1;
  }
  async find(conditions) {
    const rooms = await this.getRooms();
    return rooms.filter((room) => {
      if (!room.roomId) {
        return false;
      }
      for (const field in conditions) {
        if (conditions.hasOwnProperty(field) && room[field] !== conditions[field]) {
          return false;
        }
      }
      return true;
    });
  }
  findOne(conditions) {
    if (typeof conditions.roomId !== "undefined") {
      return new Promise((resolve, reject) => {
        this._client.hget("roomcaches", conditions.roomId).then((roomcache) => {
          if (roomcache) {
            resolve(new RoomData(JSON.parse(roomcache), this._client));
          } else {
            resolve(void 0);
          }
        }).catch(reject);
      });
    } else {
      return new Query(this.getRooms(conditions["name"]), conditions);
    }
  }
  getRooms(roomName) {
    if (this._roomCacheRequestByName[roomName] !== void 0) {
      return this._roomCacheRequestByName[roomName];
    }
    const roomCacheRequest = this._concurrentRoomCacheRequest || this._client.hgetall("roomcaches");
    this._concurrentRoomCacheRequest = roomCacheRequest;
    this._roomCacheRequestByName[roomName] = roomCacheRequest.then((result) => {
      this._concurrentRoomCacheRequest = void 0;
      delete this._roomCacheRequestByName[roomName];
      let roomcaches = Object.entries(result ?? []);
      if (roomName !== void 0) {
        const roomNameField = `"name":"${roomName}"`;
        roomcaches = roomcaches.filter(([, roomcache]) => roomcache.includes(roomNameField));
      }
      return roomcaches.map(
        ([, roomcache]) => new RoomData(JSON.parse(roomcache), this._client)
      );
    });
    return this._roomCacheRequestByName[roomName];
  }
  async shutdown() {
    await this._client.quit();
  }
  clear() {
    this._client.del("roomcaches");
  }
}
export {
  RedisDriver
};
