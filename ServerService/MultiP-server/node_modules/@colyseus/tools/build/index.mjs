import fs from "fs";
import os from "os";
import http from "http";
import path from "path";
import cors from "cors";
import express from "express";
import dotenv from "dotenv";
import osUtils from "node-os-utils";
import { logger, Server, matchMaker } from "@colyseus/core";
import { WebSocketTransport } from "@colyseus/ws-transport";
let uWebSocketsExpressCompatibility = void 0;
try {
  uWebSocketsExpressCompatibility = require("uwebsockets-express").default;
} catch (e) {
}
let BunWebSockets = void 0;
try {
  BunWebSockets = require("@colyseus/bun-websockets");
} catch (e) {
}
function getNodeEnv() {
  return process.env.NODE_ENV || "development";
}
function getRegion() {
  return (process.env.REGION || "unknown").toLowerCase();
}
function loadEnvFile(envFileOptions, log = "none") {
  const envPaths = [];
  envFileOptions.forEach((envFilename) => {
    envPaths.push(path.resolve(path.dirname(require?.main?.filename || process.cwd()), "..", envFilename));
    envPaths.push(path.resolve(process.cwd(), envFilename));
  });
  const envPath = envPaths.find((envPath2) => fs.existsSync(envPath2));
  if (envPath) {
    dotenv.config({ path: envPath });
    if (log !== "none") {
      logger.info(`\u2705 ${path.basename(envPath)} loaded.`);
    }
  } else if (log === "both") {
    logger.info(`\u2139\uFE0F  optional .env file not found: ${envFileOptions.join(", ")}`);
  }
}
if (process.env.COLYSEUS_CLOUD !== void 0) {
  loadEnvFile([`.env.cloud`]);
}
loadEnvFile([`.env.${getNodeEnv()}`, `.env`], "both");
if (process.env.REGION !== void 0) {
  loadEnvFile([`.env.${getRegion()}.${getNodeEnv()}`], "success");
}
const ALLOWED_KEYS = {
  "displayLogs": "boolean",
  "options": "object",
  "getId": "function",
  "initializeTransport": "function",
  "initializeExpress": "function",
  "initializeGameServer": "function",
  "beforeListen": "function"
};
function src_default(options) {
  for (const option in options) {
    if (!ALLOWED_KEYS[option]) {
      throw new Error(`\u274C Invalid option '${option}'. Allowed options are: ${Object.keys(ALLOWED_KEYS).join(", ")}`);
    }
    if (options[option] !== void 0 && typeof options[option] !== ALLOWED_KEYS[option]) {
      throw new Error(`\u274C Invalid type for ${option}: please provide a ${ALLOWED_KEYS[option]} value.`);
    }
  }
  return options;
}
async function listen(options, port = Number(process.env.PORT || 2567)) {
  const serverOptions = options.options || {};
  options.displayLogs = options.displayLogs ?? true;
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    port = 2567;
  }
  const processNumber = Number(process.env.NODE_APP_INSTANCE || "0");
  port += processNumber;
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    const useRedisConfig = os.cpus().length > 1 || process.env.REDIS_URI !== void 0;
    if (!serverOptions.driver && useRedisConfig) {
      let RedisDriver = void 0;
      try {
        RedisDriver = require("@colyseus/redis-driver").RedisDriver;
        serverOptions.driver = new RedisDriver(process.env.REDIS_URI);
      } catch (e) {
        logger.warn("");
        logger.warn("\u274C could not initialize RedisDriver.");
        logger.warn("\u{1F449} npm install --save @colyseus/redis-driver");
        logger.warn("");
      }
    }
    if (!serverOptions.presence && useRedisConfig) {
      let RedisPresence = void 0;
      try {
        RedisPresence = require("@colyseus/redis-presence").RedisPresence;
        serverOptions.presence = new RedisPresence(process.env.REDIS_URI);
      } catch (e) {
        logger.warn("");
        logger.warn("\u274C could not initialize RedisPresence.");
        logger.warn("\u{1F449} npm install --save @colyseus/redis-presence");
        logger.warn("");
      }
    }
    serverOptions.publicAddress = process.env.SUBDOMAIN + "." + process.env.SERVER_NAME;
    if (useRedisConfig) {
      serverOptions.publicAddress += "/" + port;
    }
  }
  const transport = await getTransport(options);
  const gameServer = new Server({
    ...serverOptions,
    transport
  });
  await options.initializeGameServer?.(gameServer);
  await matchMaker.onReady;
  await options.beforeListen?.();
  if (process.env.COLYSEUS_CLOUD !== void 0) {
    await gameServer.listen(`/run/colyseus/${port}.sock`);
  } else {
    await gameServer.listen(port);
  }
  if (typeof process.send === "function") {
    process.send("ready");
  }
  if (options.displayLogs) {
    logger.info(`\u2694\uFE0F  Listening on http://localhost:${port}`);
  }
  return gameServer;
}
async function getTransport(options) {
  let transport;
  if (!options.initializeTransport) {
    if (BunWebSockets !== void 0) {
      options.initializeTransport = (options2) => new BunWebSockets.BunWebSockets(options2);
    } else {
      options.initializeTransport = (options2) => new WebSocketTransport(options2);
    }
  }
  let app = express();
  let server = http.createServer(app);
  transport = await options.initializeTransport({ server });
  if (transport["expressApp"]) {
    app = transport["expressApp"];
  }
  if (options.initializeExpress) {
    if (transport["app"]) {
      if (typeof uWebSocketsExpressCompatibility === "function") {
        if (options.displayLogs) {
          logger.info("\u2705 uWebSockets.js + Express compatibility enabled");
        }
        server = void 0;
        app = uWebSocketsExpressCompatibility(transport["app"]);
      } else {
        if (options.displayLogs) {
          logger.warn("");
          logger.warn("\u274C uWebSockets.js + Express compatibility mode couldn't be loaded, run the following command to fix:");
          logger.warn("\u{1F449} npm install --save uwebsockets-express");
          logger.warn("");
        }
        app = void 0;
      }
    }
  }
  if (app) {
    app.use(cors({ origin: true, credentials: true }));
    app.use(express.json());
    if (options.initializeExpress) {
      await options.initializeExpress(app);
    }
    app.get("/__healthcheck", (req, res) => {
      res.status(200).end();
    });
    app.get("/__cloudstats", async (req, res) => {
      if (process.env.CLOUD_SECRET && req.headers.authorization !== process.env.CLOUD_SECRET) {
        res.status(401).end();
        return;
      }
      const rooms = (await matchMaker.stats.fetchAll()).reduce((prev, curr) => {
        return prev + curr.roomCount;
      }, 0);
      const ccu = await matchMaker.stats.getGlobalCCU();
      const mem = await osUtils.mem.used();
      const cpu = await osUtils.cpu.usage() / 100;
      res.json({
        version: 1,
        mem: mem.usedMemMb / mem.totalMemMb,
        cpu,
        ccu,
        rooms
      });
    });
    if (options.displayLogs) {
      logger.info("\u2705 Express initialized");
    }
  }
  return transport;
}
export {
  src_default as default,
  getTransport,
  listen
};
