L'errore che stai vedendo, Uncaught (in promise) NotAllowedError: play() failed because the user didn't interact with the document first., è una restrizione di sicurezza standard del browser progettata per impedire la riproduzione automatica di audio (e video) senza il consenso esplicito dell'utente. Vediamo perché accade e come risolverlo:

Perché si verifica questo errore:

Politica di Autoplay del Browser: I moderni browser web hanno politiche in atto per impedire la riproduzione automatica di audio e video senza l'interazione dell'utente. Questo per evitare suoni indesiderati o dirompenti.
Requisito di Interazione dell'Utente: Il browser sta applicando una regola secondo cui la riproduzione audio può essere avviata solo dopo che l'utente ha interagito con la pagina in qualche modo (ad esempio, cliccando, toccando, premendo un tasto). Questo è spiegato dal link fornito nel tuo messaggio di errore (https://goo.gl/xX8pDD) che indirizza alla spiegazione di Google di questo comportamento del browser.
audio.play() Immediatamente al Caricamento: Il tuo codice tenta di riprodurre immediatamente l'audio nel momento in cui la pagina viene caricata. Poiché l'utente non ha ancora interagito, il browser lo blocca, generando il NotAllowedError.
Come Risolverlo (Il Modo Corretto):

Ecco una panoramica delle migliori pratiche e un esempio di codice corretto:

Interazione dell'Utente: La chiave è che hai bisogno di un gesto dell'utente (un clic, un tocco, ecc.) per abilitare la riproduzione audio. Il modo più comune per ottenere questo è utilizzare un pulsante o un listener di eventi legato all'interazione dell'utente.
Riproduzione Ritardata: Devi aspettare che l'utente abbia interagito con la pagina prima di tentare di riprodurre l'audio.
play() Restituisce una Promise: Il metodo play() sull'oggetto Audio restituisce una Promise. Questo significa che devi gestire il caso in cui fallisce (come il NotAllowedError).
Ecco una versione corretta e migliorata del tuo codice:

Codice

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Page Title</title>
  </head>
<body>
  <button id="startButton">Start Game</button>
  <script>
    // Get the game mode from local storage (if present).
    const gameMode = localStorage.getItem("GameMode");

    //Check if there is a game mode, if not set it to BattleRoyale.
    if(!gameMode){
      localStorage.setItem("GameMode", "BattleRoyale");
    }
    
    const audio = new Audio('/resources/audio/Loading.wav');
    const button = document.getElementById("startButton");

    // when click on button
    button.addEventListener('click', function() {
      // when the user has interacted with the page, then play
      // audio
      if (audio) {
        // Check if audio is ready
        if (audio.readyState === 0) {
        // if audio is ready
        audio.play();
        }
        else {
        // if not then try again
        audio.play()
        .then(function(value) {
          // Handle the success of the operation
          console.log('play audio is successful');
          
        }).catch(function(error) {
          // Handle the error if it occurs
          console.error('play audio is failed', error);
          
        });
Usa frammenti di codice con cautela

Spiegazione:

HTML: Abbiamo aggiunto un pulsante interattivo (startButton) per avviare l'audio.
JavaScript:
new Audio(): Questo crea l'oggetto audio.
button.addEventListener: Ascolta un clic sul pulsante.
audio.play(): Riproduciamo l'audio solo dopo che l'utente ha interagito.
then e catch: Poiché il metodo play() restituisce una Promise, usiamo .then() e .catch() per gestire il successo o il fallimento.
if (audio): verifica se c'è un oggetto con cui lavorare
audio.readyState === 0: Verifica se l'audio è pronto
audio.play(): riproduci l'audio
then: se l'operazione ha successo, stampa play audio is successful
.catch: Gestisci l'errore se si verifica e stampa play audio is failed
Gestione delle Promise: Il .then() gestisce la riproduzione riuscita e il .catch() gestisce il NotAllowedError e altri problemi.
Miglioramenti chiave nel codice aggiornato:

Riproduzione Iniziata dall'Utente: La riproduzione ora viene avviata dopo l'interazione dell'utente, rispettando le politiche di autoplay del browser.
Gestione delle Promise: Il codice gestisce correttamente i potenziali fallimenti utilizzando .then() e .catch().
Codice Più Chiaro: Il codice aggiornato è meglio organizzato e più leggibile.
Esperienza dell'utente: L'utente clicca sul pulsante e dopo l'audio verrà riprodotto.
In sintesi:

Il problema è che il browser non ti permetterà di riprodurre automaticamente audio o video senza un'interazione esplicita dell'utente. Devi aspettare che un utente clicchi un pulsante o interagisca con la tua pagina prima di riprodurre. Non puoi riprodurlo immediatamente al caricamento della pagina.

Seguendo l'esempio fornito, gestirai correttamente le restrizioni del browser e riprodurrai il tuo audio in modo affidabile.